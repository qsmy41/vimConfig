#################################
# => Content
#################################

# 1. General structures
# 2. Fractions
# 3. Symbols simplified
# 4. Speed up small things

#################################
# => End of content
#################################

#################################
# => Improvements comments
#################################

# 1.
# inspired by the castel ultisnips, regarding "xii" and "xjj"
# write a snippet that can accept any two duplicating char, not limited to i or j
# e.g. xkk, xll, xpp, etc.

# 2.
# write a snippet such that you can select them and do underbrace/overbrace on them,
# similar to the one with division, where you can select a block and implement.

#################################
# => End of Comments
#################################

# define "context math()"
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

#################################
# => General Structures
#################################

snippet model "template" b
\documentclass[12pt]{${1:report}}
\usepackage[thinc]{esdiff} % for typesettign derivatives
\usepackage{amsthm} % provides an enhanced version of LaTex's \newtheorem command
\usepackage{mdframed} % framed environments that can split at page boundaries
\usepackage{enumitem} % bulletin points or other means of listing things
\usepackage{amssymb} % for AMS symbols
\usepackage{amsmath} % so as to use align
\usepackage{latexsym} % so as to use symbols like \leadsto
\usepackage{mathrsfs} % for using mathscr for char like operators
\usepackage{authblk} % for writing affiliations
\usepackage{graphicx} % for importing images
\graphicspath{{./images/}} % for the path to images, also always put label behind captions
\usepackage{textcomp} % for using degree symbol

\theoremstyle{definition}
\mdfdefinestyle{defEnv}{%
  hidealllines=false,
  nobreak=true,
  innertopmargin=-1ex,
}

\pagestyle{headings}
\author{Lectured by $2}
\title{$3}
\affil{Typed by Aris Zhu Yi Qing}
\begin{document}
\maketitle
\tableofcontents

$0

\end{document}
endsnippet

snippet package "package" b
\usepackage[${1:optionis}]{${2:package}}
$0
endsnippet

snippet def "definition" b
\newmdtheoremenv[style=defEnv]{$1}[theorem]{Definition}
\begin{$1}
	$2
\end{$1}
$0
endsnippet

snippet theorem "theorem" b
\newmdtheoremenv[style=defEnv]{$1}[theorem]{Theorem}
\begin{$1}
	$2
\end{$1}
$0
endsnippet

snippet prop "proposition" b
\newmdtheoremenv[style=defEnv]{$1}[theorem]{Proposition}
\begin{$1}
	$2
\end{$1}
$0
endsnippet

snippet lemma "lemma" b
\newmdtheoremenv[style=defEnv]{$1}[theorem]{Lemma}
\begin{$1}
	$2
\end{$1}
$0
endsnippet

snippet coro "corollary" b
\newmdtheoremenv[style=defEnv]{$1}[theorem]{Corollary}
\begin{$1}
	$2
\end{$1}
$0
endsnippet

snippet example "example" b
\newtheorem{$1}[theorem]{Example}
\begin{$1}
	$2
\end{$1}
$0
endsnippet

snippet item "item" b
\begin{itemize}
		\item $1
\end{itemize}
$0
endsnippet

snippet list "list" b
\begin{enumerate}[label = (\\${1:roman}*)]
    \item $2
\end{enumerate}
$0
endsnippet

snippet description "description" b
\begin{description}
		\item[$1] $2
\end{description}
$0
endsnippet

snippet figure "figure" b
\begin{figure}
  	\includegraphics[scale=0.15]{$1}
  	\centering
  	\caption{$2}\label{$3}
\end{figure}
$0
endsnippet

snippet beg "begin{} / end{}" bA
\begin{$1}$2
	$3
\end{$1} $0
endsnippet


snippet beg "begin{} / end{}" i
\begin{$1}$2
	$3
\end{$1} $0
endsnippet

snippet \[ "\[ / \]" iA
\[
	$1
\]$0
endsnippet

# Why t[2] and t[2][0]?
snippet mk "InlineMath" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet box "box up" b
\fbox{\begin{minipage}{\linewidth}
$1
\end{minipage}}
$0
endsnippet

#################################
# => End of General Structures
#################################

#################################
# => Fractions
#################################

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0 : break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

priority 10
context "math()"
snippet "dd([a-zA-Z])" "d/dx / d/dy / ..." riA
\\frac{\mathrm{d}$1}{\mathrm{d}`!p snip.rv=match.group(1)`$2}$3
endsnippet

priority 100
context "math()"
snippet "pdd([a-zA-Z])" "partial derivative of d/dx / d/dy / ..." riA
\\frac{\partial$1}{\partial `!p snip.rv=match.group(1)`$2}$3
endsnippet

#################################
# => End of fractions
#################################

#################################
# => Symbols simplified
#################################

context "math()"
snippet +- "plus/minus" iA
\\pm
endsnippet

context "math()"
snippet -+ "minus/plus" iA
\\mp
endsnippet

context "math()"
snippet == "equivalent" iA
\\equiv
endsnippet

priority 10
context "math()"
snippet != "not equal" iA
\\neq
endsnippet

priority 100
context "math()"
snippet =!= "not equivalent" iA
\\not\\equiv
endsnippet

priority 10
context "math()"
snippet -> "approaches" iA
\\rightarrow{}
endsnippet

priority 100
context "math()"
snippet --> "arrows to" iA
\\longrightarrow
endsnippet

priority 100
context "math()"
snippet |-> "mapsto" iA
\\mapsto
endsnippet

priority 100
context "math()"
snippet !-> "does not approach" iA
\\nrightarrow
endsnippet

priority 200
context "math()"
snippet |--> "long mapsto" iA
\\longmapsto
endsnippet

priority 200
context "math()"
snippet !--> "does not arrow to" iA
\\nlongrightarrow
endsnippet

priority 10
context "math()"
snippet => "implies" iA
\\Rightarrow{}
endsnippet

priority 100
context "math()"
snippet ==> "long-implies" iA
\\Longrightarrow
endsnippet

priority 100
context "math()"
snippet !=> "does not imply" iA
\\nRightarrow
endsnippet

priority 200
context "math()"
snippet !==> "does not long-implies" iA
\\nLongrightarrow
endsnippet

priority 10
context "math()"
snippet -< "left arrow" iA
\\leftarrow
endsnippet

priority 100
context "math()"
snippet --< "long left arrow" iA
\\longleftarrow
endsnippet

priority 100
context "math()"
snippet !-< "not left arrow" iA
\\nleftarrow
endsnippet

priority 200
context "math()"
snippet !--< "not long left arrow" iA
\\nlongleftarrow
endsnippet

priority 10
context "math()"
snippet =< "implied by" iA
\\Leftarrow
endsnippet

priority 100
context "math()"
snippet ==< "long-implied by" iA
\\Longleftarrow
endsnippet

priority 100
context "math()"
snippet !=< "not implied by" iA
\\nLeftarrow
endsnippet

priority 200
context "math()"
snippet !==< "not long-implied by" iA
\\nLongleftarrow
endsnippet

snippet l.. "l..." iA
\\ldots
endsnippet

snippet c.. "cdots" iA
\\cdots
endsnippet

snippet v.. "vdots" iA
\\vdots
endsnippet

snippet d.. "ddots" iA
\\ddots
endsnippet

context "math()"
snippet ** "cdot" iA
\\cdot
endsnippet

context "math()"
snippet << "<<" iA
\\ll
endsnippet

context "math()"
snippet >> ">>" iA
\\gg
endsnippet

context "math()"
snippet <-> "<->" iA
\\leftrightarrow
endsnippet

context "math()"
snippet <--> "<-->" iA
\\longleftrightarrow
endsnippet

context "math()"
snippet <=> "iff" iA
\\iff
endsnippet

context "math()"
snippet ||| "|| x ||" iA
\\lVert $1 \\rVert $2
endsnippet

context "math()"
snippet ooo "infinity" iA
\\infty
endsnippet

context "math()"
snippet xxx "times" iA
\\times
endsnippet

#################################
# => End of Symbols simplified
#################################

#################################
# => Speed up small things
#################################

context "math()"
snippet s.t. "s.t. in math mode" i
\\;\text{s.t.}\;
endsnippet

snippet degree "degree symbol" i
\\textdegree
endsnippet

context "math()"
snippet and "and logical operator" i
\\wedge
endsnippet

context "math()"
snippet or "or logical operator" i
\\vee
endsnippet

snippet i.e. "i.e." iA
i.e.\\
endsnippet

context "math()"
snippet >= "greater than or equal to" iA
\\ge{}
endsnippet

context "math()"
snippet <= "less than or equal to" iA
\\le{}
endsnippet

context "math()"
snippet pmat "matrix with parenthesis" i
\\begin{pmatrix}
		$1
\\end{pmatrix} $0
endsnippet

context "math()"
snippet bmat "matrix with square brackets" i
\\begin{bmatrix}
		$1
\\end{bmatrix} $0
endsnippet

snippet uli "underline" i
\\underline{$1}$2
endsnippet

snippet thi "thick(bold)" i
\\textbf{$1}$2
endsnippet

context "math()"
snippet bo "bold (in maths environment)" iA
\\pmb{$1}$2
endsnippet

snippet es "emphasize" i
\\emph{$1}$2
endsnippet

snippet te "Thick Emphasize (emph and bold)" i
\\textbf{\\emph{$1}}$2
endsnippet

snippet eu "emphasized underline" i
\\emph{\\underline{$1}}$2
endsnippet

priority 10
snippet tu "thick underline" i
\\textbf{\\underline{$1}}$2
endsnippet

priority 100
snippet etu "emphasized thick underline" i
\\underline{\\emph{\\textbf{$1}}}$2
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`$1}$2
endsnippet

priority 10
context "math()"
snippet __ "subscript" iA
_{$1}$2
endsnippet

priority 100
context "math()"
snippet [__ "bracket subscript" iA
{[$1]}_{$2}$3
endsnippet

priority 200
context "math()"
snippet l[__ "dynamic bracket subscript" iA
{\\left[$1\\right]}_{$2}$3
endsnippet

priority 100
context "math()"
snippet (__  "paranthesis subscript" iA
{($1)}_{$2}$3
endsnippet

priority 200
context "math()"
snippet l(__ "dynamic paranthesis subscript" iA
{\\left($1\\right)}_{$2}$3
endsnippet

priority 100
context "math()"
snippet {__ "big paranthesis subscript" iA
{\\{$1\\}}_{$2}$3
endsnippet

priority 200
context "math()"
snippet l{__ "dynamic big parenthesis subscript" iA
{\\left\\{$1\\right\\}}_{$2}$3
endsnippet

context "math()"
snippet lr( "() - height adjusted" iA
\\left($1\\right)$2
endsnippet

context "math()"
snippet lr[ "[] - height adjusted" iA
\\left[$1\\right]$2
endsnippet

context "math()"
snippet lr{ "{} - height adjusted" iA
\\left\\{$1\\right\\}$2
endsnippet

context "math()"
snippet lr| "|| - height adjusted" iA
\\left|$1\\right|$2
endsnippet

context "math()"
snippet lr\| "|| || = height adjusted" iA
\\left\|$1\\right\|$2
endsnippet

context "math()"
snippet sr "square root" iA
\\sqrt{$1}$2
endsnippet

priority 10
context "math()"
snippet tp "To the Power of (^)" iA
^{$1}$2
endsnippet

priority 100
context "math()"
snippet (tp "{()}^{}" iA
{($1)}^{$2}$3
endsnippet

priority 100
context "math()"
snippet [tp "{[]}^{}" iA
{[$1]}^{$2}$3
endsnippet

priority 100
context "math()"
snippet |tp "{||}^{}" iA
{|$1|}^{$2}$3
endsnippet

priority 200
context "math()"
snippet l(tp "{()}^{} - height adjusted" iA
{\\left($1\\right)}^{$2}$3
endsnippet

priority 200
context "math()"
snippet l[tp "{[]}^{} - height adjusted" iA
{\\left[$1\\right]}^{$2}$3
endsnippet

priority 200
context "math()"
snippet l|tp "{||}^{} - height adjusted" iA
{\\left|$1\\right|}^{$2}$3
endsnippet

priority 10
context "math()"
snippet bar "bar" iA
\\overline{$1}$2
endsnippet

priority 100
context "math()"
snippet "(\\?\w+)bar" "bar" riA
\\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet ht "hat" iA
\\hat{$1}$2
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])ht" "hat" riA
\\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 200
context "math()"
snippet wht "widehat" iA
\\widehat{$1}$2
endsnippet

priority 300
context "math()"
snippet "([a-zA-Z])wht" "widehat" riA
\\widehat{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet ~~ "tilde" iA
\\tilde{$1}$2
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])~~" "tilde" riA
\\tilde{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\\overrightarrow{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "([A-Z])bb" "\mathbb" riA
\\mathbb{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "([A-Za-z0-9])bf" "\mathbf" riA
\\mathbf{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "([A-Z])cr" "\mathscr" riA
\\mathscr{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet code "\texttt" wA
\\texttt{$1}$2
endsnippet

snippet code "\texttt" w
\\texttt{$1}$2
endsnippet

context "math()"
snippet dint "integral" wA
\\int_{${1:-\infty}}^{${2:\infty}} $3
endsnippet

context "math()"
snippet diint "double integral" wA
\\iint_{${1:-\infty}}^{${2:\infty}} $3
endsnippet

context "math()"
snippet dsum "summation with bounds" iA
\\sum_{${1:n=1}}^{${2:\infty}} ${3:a_n x^n}
endsnippet

context "math()"
snippet taylor "taylor" iA
\\sum_{${1:n}=${2:0}}^{${3:\infty}} ${4:a_$1} ${5:(x-x_0)^$1}
endsnippet

context "math()"
snippet ub "UnderBrace" i
\\underbrace{$1}_\text{$2}$3
endsnippet

context "math()"
snippet ob "OverBrace" i
\\overbrace{$1}^\text{$2}$3
endsnippet

snippet \\\ "\ char" iA
\\backslash
endsnippet

#################################
# => End of speed up small things
#################################

